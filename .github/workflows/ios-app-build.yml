name: Build iOS app

on:
  push:
    branches:
      - bixin_dev
    paths:
      - ios/**
      - electrum/**
      - electrum_gui/**

jobs:
  build:
    runs-on: macos-latest
    env:
      APP_ID: so.onekey.one.OneKey
      APP_NAME: OneKey
      EMAIL: hello@onekey.so
      PROJECT_WORKSPACE: OneKey.xcworkspace
      PROJECT_SCHEME: OneKey
      PROJECT_CONFIGURATION: Debug
      CODE_SIGN_IDENTITY: "iPhone Developer"
      UUID_PROVISION: 5ba698c8-a3c7-4e73-9c7b-7667b353a5bb
      CODE_SIGN_STYLE: Manual
      DEVELOPMENT_TEAM: 6M2QF4T7XG
      PUBLISH_IPA: false

    steps:
      - name: checkout branch
        uses: actions/checkout@v2
        with:
            submodules: 'true'
      - name: Switch XCode Version
        run: sudo xcode-select -s /Applications/Xcode_11.3.1.app
      - name: Cache build env
        uses: actions/cache@v2
        env:
          cache-name: cache-ios-build
        with:
          # python cache files are stored in `~/.local` on Linux/macOS
          path: |
            - $HOME/.briefcase
            - $HOME/.cookiecutters
            - $HOME/.local
            - $HOME/Library/Caches/Homebrew
            - $HOME/Library/Caches/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Install brew deps
        run: |
          brew unlink python
          brew link --overwrite --dry-run python@3.8
          brew tap growingio/homebrew-oclint
          brew install oclint-growing
      - name: Install python3 deps
        run: |
          export PATH="/usr/local/opt/python@3.8/bin:$PATH"
          python3.8 -m pip install "setuptools==41.2.0"
          python3.8 -m pip install "pip==19.2.3"
          python3.8 -m pip install 'cookiecutter==1.6.0' --user
          python3.8 -m pip install 'briefcase==0.2.6' --user
          python3.8 -m pip install 'pbxproj==2.5.1' --user
      # - name: Setup cert
      #   run: ./.github/secrets/decrypt_certs.sh
      #   env:
      #     IOS_CERTIFICATE_PASS: ${{ secrets.IOS_CERTIFICATE_PASS }}
      #     ENCRYPT_PASS: ${{ secrets.ENCRYPT_PASS }}
      - name: prepare build env
        run: |
          export PATH="/usr/local/opt/python@3.8/bin:$PATH"
          ./make_ios_project.sh
        working-directory: ios
      - name: Create ExportOptions
        run: |
          plutil -replace  'CFBundleVersion' -string "4000$GITHUB_RUN_NUMBER" -- Support/OneKey-Info.plist
          plutil -insert  'provisioningProfiles' -xml "<dict> <key>$APP_ID</key> <string>$UUID_PROVISION</string> </dict>" -- Support/OneKey-Info.plist
          plutil -insert  'teamID' -string "$DEVELOPMENT_TEAM" -- Support/OneKey-Info.plist
          plutil -insert  'signingStyle' -string "mannual" -- Support/OneKey-Info.plist
        working-directory: ios
      - name: Build app
        id: xcodebuild_export
        run: |
          mkdir build
          mkdir logs
          xcodebuild archive \
           -workspace "$PROJECT_WORKSPACE" \
           -scheme "$PROJECT_SCHEME" \
           -configuration "$PROJECT_CONFIGURATION" \
           -archivePath $PWD/build/app_build.xcarchive \
           CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
           PROVISIONING_PROFILE="$UUID_PROVISION" \
           DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
           CODE_SIGN_STYLE="$CODE_SIGN_STYLE" \
           IPHONEOS_DEPLOYMENT_TARGET=11.0
        working-directory: ios/iOS
      - name: Export IPA
        id: xcodebuild_archive
        run: |
          xcodebuild -exportArchive \
          -exportPath $PWD/build \
          -archivePath $PWD/build/app_build.xcarchive \
          -exportOptionsPlist ../Support/${APP_NAME}-Info.plist
        working-directory: ios/iOS
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: OneKey-${{ github.sha }}.ipa
          path: |
            ios/iOS/build/${{ env.APP_NAME }}.ipa
            ios/iOS/build/app_build.xcarchive/dSYMs
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: push to server
        run: |
            scp "ios/iOS/build/${{ env.APP_NAME }}.ipa" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/output/
            export CHANGE_LOG=`git log HEAD -n 1`
            ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd /output && ./push.sh ${{ env.APP_NAME }}.ipa '\"$CHANGE_LOG\"' >ios_log"
      - name: lint check
        id: xcodebuild_lint
        run: |
          xcodebuild clean analyze \
           -workspace "$PROJECT_WORKSPACE" \
           -scheme "$PROJECT_SCHEME" \
           -configuration "$PROJECT_CONFIGURATION" \
           -archivePath $PWD/build/app_build.xcarchive \
           CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
           PROVISIONING_PROFILE="$UUID_PROVISION" \
           DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
           CODE_SIGN_STYLE="$CODE_SIGN_STYLE" \
           IPHONEOS_DEPLOYMENT_TARGET=11.0 \
           COMPILER_INDEX_STORE_ENABLE="NO" \
           CLANG_ANALYZER_OUTPUT=plist-html \
           CLANG_ANALYZER_OUTPUT_DIR="$(pwd)/clang-analyze" \
           | tee xcodebuild.log  \
           | xcpretty -r json-compilation-database --output compile_commands.json
          oclint-json-compilation-database -e Pods -e CustomCode/Modules/Third/ -- -report-type html -o oclintReport.html
        working-directory: ios/iOS
      - name: Archive lint artifacts
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: OneKey ios app lint report
          path: |
            ios/iOS/xcodebuild.log
            ios/iOS/oclintReport.html
            ios/iOS/clang-analyze/StaticAnalyzer/
